#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÂÆâË£ÖÁÆÄÂçïÁöÑWebÁºñËæëÂô®
Âü∫‰∫éPythonÁöÑËΩªÈáèÁ∫ßÂú®Á∫øÁºñËæëÂô®
"""

import os
import http.server
import socketserver
import urllib.parse
import json
from pathlib import Path

class MarkdownEditorHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Â§ÑÁêÜnginx‰ª£ÁêÜË∑ØÂæÑ
        if self.path == '/' or self.path == '/editor' or self.path.startswith('/editor'):
            self.serve_editor()
        elif self.path.startswith('/api/files'):
            self.list_files()
        elif self.path.startswith('/api/read/'):
            self.read_file()
        else:
            super().do_GET()
    
    def do_POST(self):
        if self.path.startswith('/api/save/'):
            self.save_file()
        else:
            self.send_error(404)
    
    def serve_editor(self):
        """Êèê‰æõÁºñËæëÂô®ÁïåÈù¢"""
        html = '''
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìù Markdown ÁºñËæëÂô® - CUHK Study</title>
    <style>
        * { 
            box-sizing: border-box; 
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        body { 
            margin: 0; 
            font-family: 
                -apple-system, BlinkMacSystemFont, 
                'Segoe UI', 'Roboto', 'Helvetica Neue', 
                'PingFang SC', 'Hiragino Sans GB', 
                'Microsoft YaHei UI', 'Microsoft YaHei', 
                'Source Han Sans SC', 'Noto Sans CJK SC', 
                'WenQuanYi Micro Hei', sans-serif;
            background: #f8f9fa;
            font-size: 14px;
            line-height: 1.6;
        }
        .container { display: flex; height: 100vh; }
        .sidebar { 
            width: 300px; 
            background: #fff; 
            padding: 20px; 
            overflow-y: auto; 
            border-right: 1px solid #e9ecef;
            box-shadow: 2px 0 4px rgba(0,0,0,0.1);
        }
        .editor { flex: 1; display: flex; flex-direction: column; }
        .toolbar { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            color: white; 
            padding: 15px 20px; 
            display: flex; 
            align-items: center; 
            justify-content: space-between;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .content { flex: 1; display: flex; }
        .input { flex: 1; background: #fff; }
        .preview { 
            flex: 1; 
            background: white; 
            padding: 20px; 
            overflow-y: auto; 
            border-left: 1px solid #e9ecef;
            font-family: 
                -apple-system, BlinkMacSystemFont, 
                'Segoe UI', 'Roboto', 'Helvetica Neue',
                'PingFang SC', 'Hiragino Sans GB', 
                'Microsoft YaHei UI', 'Microsoft YaHei', 
                'Source Han Sans SC', 'Noto Sans CJK SC', 
                'WenQuanYi Micro Hei', sans-serif;
            font-size: 14px;
            line-height: 1.8;
            color: #2c3e50;
        }
        textarea { 
            width: 100%; 
            height: 100%; 
            border: none; 
            padding: 20px; 
            font-family: 
                'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono',
                'Source Code Pro', 'Menlo', 'Consolas', 
                'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New',
                'Microsoft YaHei UI', 'Microsoft YaHei', monospace;
            font-size: 14px; 
            line-height: 1.8;
            resize: none; 
            outline: none; 
            background: #fff;
            color: #2c3e50;
            font-feature-settings: "liga" 0;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        .file-item { 
            padding: 12px 16px; 
            cursor: pointer; 
            border-radius: 8px; 
            margin: 4px 0; 
            transition: all 0.2s ease;
            border: 1px solid transparent;
            font-size: 14px;
        }
        .file-item:hover { 
            background: #f8f9fa; 
            border-color: #dee2e6;
            transform: translateY(-1px);
        }
        .file-item.active { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            color: white; 
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        button { 
            background: rgba(255,255,255,0.2); 
            color: white; 
            border: 1px solid rgba(255,255,255,0.3); 
            padding: 8px 16px; 
            margin: 0 4px; 
            cursor: pointer; 
            border-radius: 6px; 
            font-size: 14px;
            transition: all 0.2s ease;
        }
        button:hover { 
            background: rgba(255,255,255,0.3); 
            transform: translateY(-1px);
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .sidebar h3 {
            color: #495057;
            margin-top: 0;
            font-size: 16px;
            font-weight: 600;
        }
        .category {
            margin-bottom: 16px;
        }
        .category-header {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            color: #495057;
            border: 1px solid #dee2e6;
            transition: all 0.2s ease;
            user-select: none;
        }
        .category-header:hover {
            background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .category-header.collapsed {
            border-radius: 6px 6px 0 0;
        }
        .category-icon {
            margin-right: 8px;
            font-size: 14px;
        }
        .category-title {
            flex: 1;
            font-size: 13px;
        }
        .category-count {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
            margin-left: 8px;
        }
        .category-arrow {
            margin-left: 8px;
            transition: transform 0.2s ease;
            font-size: 12px;
            color: #6c757d;
        }
        .category-header.collapsed .category-arrow {
            transform: rotate(180deg);
        }
        .category-files {
            border: 1px solid #dee2e6;
            border-top: none;
            border-radius: 0 0 6px 6px;
            background: #fff;
            max-height: 300px;
            overflow-y: auto;
        }
        .category-files.collapsed {
            display: none;
        }
        .current-file {
            font-weight: 500;
            font-size: 16px;
        }
        .toolbar-right {
            display: flex;
            gap: 8px;
        }
        /* ‰∏≠ÊñáÂ≠ó‰ΩìÂíåÊéíÁâà‰ºòÂåñ */
        .preview h1, .preview h2, .preview h3, .preview h4, .preview h5, .preview h6 {
            font-family: 
                -apple-system, BlinkMacSystemFont, 
                'Segoe UI', 'Roboto', 'Helvetica Neue',
                'PingFang SC', 'Hiragino Sans GB', 
                'Microsoft YaHei UI', 'Microsoft YaHei', 
                'Source Han Sans SC', 'Noto Sans CJK SC', sans-serif;
            color: #2c3e50;
            font-weight: 600;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
            line-height: 1.4;
        }
        .preview p, .preview li {
            line-height: 1.8;
            color: #34495e;
            margin: 0.8em 0;
            word-break: break-word;
            word-wrap: break-word;
        }
        .preview code {
            background: #f1f3f4;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 
                'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono',
                'Source Code Pro', 'Menlo', 'Consolas', 
                'Microsoft YaHei UI', monospace;
            font-size: 0.9em;
            color: #d73a49;
        }
        .preview pre {
            background: #f6f8fa;
            padding: 16px;
            border-radius: 6px;
            overflow-x: auto;
            border: 1px solid #e1e4e8;
            line-height: 1.6;
        }
        .preview pre code {
            background: none;
            padding: 0;
            color: #24292e;
        }
        .preview blockquote {
            border-left: 4px solid #dfe2e5;
            padding-left: 16px;
            margin: 16px 0;
            color: #6a737d;
            font-style: italic;
        }
        .preview table {
            border-collapse: collapse;
            width: 100%;
            margin: 16px 0;
        }
        .preview th, .preview td {
            border: 1px solid #dfe2e5;
            padding: 8px 12px;
            text-align: left;
        }
        .preview th {
            background: #f6f8fa;
            font-weight: 600;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <h3>üìÇ Êñá‰ª∂ÊµèËßàÂô®</h3>
            <div id="fileList"></div>
        </div>
        <div class="editor">
            <div class="toolbar">
                <span class="current-file" id="currentFile">ÈÄâÊã©‰∏Ä‰∏™Êñá‰ª∂ÂºÄÂßãÁºñËæë</span>
                <div class="toolbar-right">
                    <button onclick="saveFile()" id="saveBtn" disabled>üíæ ‰øùÂ≠ò</button>
                    <button onclick="refreshFiles()">üîÑ Âà∑Êñ∞</button>
                </div>
            </div>
            <div class="content">
                <div class="input">
                    <textarea id="editor" placeholder="ÈÄâÊã©‰∏Ä‰∏™ Markdown Êñá‰ª∂ÂºÄÂßãÁºñËæë...

ÊîØÊåÅ‰∏≠ÊñáÂ≠óÁ¨¶ËæìÂÖ•ÔºåÂåÖÊã¨Ôºö
- ÁÆÄ‰Ωì‰∏≠Êñá
- ÁπÅ‰Ωì‰∏≠Êñá  
- ‰∏≠ÊñáÊ†áÁÇπÁ¨¶Âè∑
- Ê∑∑Âêà‰∏≠Ëã±ÊñáÂÜÖÂÆπ

Âø´Êç∑ÈîÆÔºö
Ctrl+S: ‰øùÂ≠òÊñá‰ª∂" disabled></textarea>
                </div>
                <div class="preview" id="preview">
                    <h3>üìñ È¢ÑËßàÁ™óÂè£</h3>
                    <p>Markdown È¢ÑËßàÂÜÖÂÆπÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫...</p>
                    <p>ÊîØÊåÅÂÆåÊï¥ÁöÑ‰∏≠ÊñáÂ≠óÁ¨¶Ê∏≤ÊüìÔºåÂåÖÊã¨‰∏≠Ëã±ÊñáÊ∑∑ÊéíÂíå‰∏≠ÊñáÊ†áÁÇπ„ÄÇ</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentFile = null;
        const editor = document.getElementById('editor');
        const preview = document.getElementById('preview');
        const currentFileSpan = document.getElementById('currentFile');
        const saveBtn = document.getElementById('saveBtn');
        
        editor.addEventListener('input', updatePreview);
        
        // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
        document.addEventListener('keydown', function(e) {
            // Ctrl+S ‰øùÂ≠òÊñá‰ª∂
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                saveFile();
            }
            // Ctrl+R Âà∑Êñ∞Êñá‰ª∂ÂàóË°®
            if (e.ctrlKey && e.key === 'r') {
                e.preventDefault();
                refreshFiles();
            }
        });
        
        function updatePreview() {
            const markdown = editor.value;
            try {
                // ÈÖçÁΩÆ marked ‰ª•Êõ¥Â•ΩÂú∞ÊîØÊåÅ‰∏≠Êñá
                marked.setOptions({
                    breaks: true,  // ÊîØÊåÅ GitHub È£éÊ†ºÁöÑÊç¢Ë°å
                    gfm: true,     // ÂêØÁî® GitHub È£éÊ†ºÁöÑ Markdown
                });
                preview.innerHTML = marked.parse(markdown);
            } catch (error) {
                preview.innerHTML = '<p style="color: red;">È¢ÑËßàËß£ÊûêÈîôËØØ: ' + error.message + '</p>';
            }
        }
        
        async function loadFiles() {
            try {
                const response = await fetch('/api/files');
                const categories = await response.json();
                const fileList = document.getElementById('fileList');
                fileList.innerHTML = '';
                
                // ÂàõÂª∫ÂàÜÁ±ªÊñá‰ª∂Ê†ë
                Object.entries(categories).forEach(([categoryName, categoryData]) => {
                    const categoryDiv = document.createElement('div');
                    categoryDiv.className = 'category';
                    
                    // ÂàÜÁ±ªÊ†áÈ¢ò
                    const headerDiv = document.createElement('div');
                    headerDiv.className = 'category-header';
                    
                    const iconSpan = document.createElement('span');
                    iconSpan.className = 'category-icon';
                    iconSpan.textContent = categoryData.icon;
                    
                    const titleSpan = document.createElement('span');
                    titleSpan.className = 'category-title';
                    titleSpan.textContent = categoryName.replace(/^[^\\s]+\\s/, ''); // ÁßªÈô§emojiÂâçÁºÄ
                    
                    const countSpan = document.createElement('span');
                    countSpan.className = 'category-count';
                    countSpan.textContent = categoryData.files.length;
                    
                    const arrowSpan = document.createElement('span');
                    arrowSpan.className = 'category-arrow';
                    arrowSpan.textContent = '‚ñº';
                    
                    headerDiv.appendChild(iconSpan);
                    headerDiv.appendChild(titleSpan);
                    headerDiv.appendChild(countSpan);
                    headerDiv.appendChild(arrowSpan);
                    
                    // Êñá‰ª∂ÂàóË°®
                    const filesDiv = document.createElement('div');
                    filesDiv.className = 'category-files';
                    
                    categoryData.files.forEach(file => {
                        const fileDiv = document.createElement('div');
                        fileDiv.className = 'file-item';
                        
                        // ÊòæÁ§∫Êñá‰ª∂ÂêçÔºàÁßªÈô§Ë∑ØÂæÑÂâçÁºÄÔºâ
                        const fileName = file.split('/').pop();
                        const filePath = file.replace(fileName, '');
                        
                        if (filePath) {
                            fileDiv.innerHTML = `
                                <div style="font-size: 12px; color: #6c757d; margin-bottom: 2px;">
                                    ${filePath}
                                </div>
                                <div>${fileName}</div>
                            `;
                        } else {
                            fileDiv.textContent = fileName;
                        }
                        
                        fileDiv.onclick = () => loadFile(file);
                        fileDiv.title = file; // ÂÆåÊï¥Ë∑ØÂæÑ‰Ωú‰∏∫ÊèêÁ§∫
                        filesDiv.appendChild(fileDiv);
                    });
                    
                    // ÁÇπÂáªÂàÜÁ±ªÊ†áÈ¢òÊäòÂè†/Â±ïÂºÄ
                    headerDiv.onclick = () => {
                        const isCollapsed = filesDiv.classList.contains('collapsed');
                        filesDiv.classList.toggle('collapsed');
                        headerDiv.classList.toggle('collapsed', !isCollapsed);
                    };
                    
                    categoryDiv.appendChild(headerDiv);
                    categoryDiv.appendChild(filesDiv);
                    fileList.appendChild(categoryDiv);
                });
                
            } catch (error) {
                console.error('Âä†ËΩΩÊñá‰ª∂ÂàóË°®Êó∂Âá∫Èîô:', error);
                const fileList = document.getElementById('fileList');
                fileList.innerHTML = '<p style="color: red; padding: 8px;">‚ùå Êó†Ê≥ïÂä†ËΩΩÊñá‰ª∂ÂàóË°®</p>';
            }
        }
        
        async function loadFile(filename) {
            try {
                const response = await fetch(`/api/read/${encodeURIComponent(filename)}`);
                const content = await response.text();
                
                editor.value = content;
                editor.disabled = false;
                currentFile = filename;
                currentFileSpan.textContent = filename;
                saveBtn.disabled = false;
                
                // Update active file
                document.querySelectorAll('.file-item').forEach(item => {
                    item.classList.remove('active');
                    // Ê£ÄÊü•Êñá‰ª∂È°πÊòØÂê¶ÂØπÂ∫îÂΩìÂâçÊñá‰ª∂
                    if (item.title === filename || item.textContent.trim() === filename) {
                        item.classList.add('active');
                    }
                });
                
                updatePreview();
            } catch (error) {
                alert('‚ùå Âä†ËΩΩÊñá‰ª∂Êó∂Âá∫ÈîôÔºö' + error.message);
            }
        }
        
        async function saveFile() {
            if (!currentFile) return;
            
            try {
                const response = await fetch(`/api/save/${encodeURIComponent(currentFile)}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'text/plain' },
                    body: editor.value
                });
                
                if (response.ok) {
                    alert('‚úÖ Êñá‰ª∂‰øùÂ≠òÊàêÂäüÔºÅ');
                } else {
                    throw new Error('‰øùÂ≠òÂ§±Ë¥•');
                }
            } catch (error) {
                alert('‚ùå ‰øùÂ≠òÊñá‰ª∂Êó∂Âá∫ÈîôÔºö' + error.message);
            }
        }
        
        function refreshFiles() {
            loadFiles();
        }
        
        // Load files on startup
        loadFiles();
    </script>
</body>
</html>
        '''
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.send_header('Cache-Control', 'no-cache')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def list_files(self):
        """ÂàóÂá∫markdownÊñá‰ª∂Âπ∂ÊåâÂàÜÁ±ªÁªÑÁªá"""
        base_dir = Path('/root/cuhkstudy')
        
        # ÂÆö‰πâÊñá‰ª∂ÂàÜÁ±ª
        categories = {
            "üìñ README ÁºñËæë": {
                "files": [],
                "patterns": ["README*.md", "*readme*.md"],
                "icon": "üìñ"
            },
            "üè† Âü∫Á°ÄÈ°µÈù¢ÁºñËæë": {
                "files": [],
                "patterns": [
                    "content/authors/**/*.md",
                    "content/info.md",
                    "content/_index.md",
                    "info.md",
                    "archetypes/**/*.md"
                ],
                "icon": "üè†"
            },
            "üìù ‰∏ªË¶ÅÂÜÖÂÆπÁºñËæë": {
                "files": [],
                "patterns": ["content/main/**/*.md"],
                "icon": "üìù"
            },
            "üî¨ UGFN ËØæÁ®ãÂÜÖÂÆπ": {
                "files": [],
                "patterns": ["content/ugfn/**/*.md"],
                "icon": "üî¨"
            },
            "üé® UGFH ËØæÁ®ãÂÜÖÂÆπ": {
                "files": [],
                "patterns": ["content/ugfh/**/*.md"],
                "icon": "üé®"
            },
            "üóÇÔ∏è ÊùÇÈ°πÂÜÖÂÆπ": {
                "files": [],
                "patterns": ["content/mess/**/*.md"],
                "icon": "üóÇÔ∏è"
            },
            "üìã ÊñáÊ°£ËµÑÊñô": {
                "files": [],
                "patterns": [
                    "docs/**/*.md",
                    "DEPLOYMENT*.md",
                    "test-*.md"
                ],
                "icon": "üìã"
            },
            "üìÅ ‰∏ä‰º†Êñá‰ª∂": {
                "files": [],
                "patterns": ["Uploads/**/*.md"],
                "icon": "üìÅ"
            },
            "üóÑÔ∏è Â§á‰ªΩÊñá‰ª∂": {
                "files": [],
                "patterns": [
                    "resource.backup/**/*.md",
                    "resources.backup/**/*.md",
                    "*.backup/**/*.md"
                ],
                "icon": "üóÑÔ∏è"
            }
        }
        
        # Êî∂ÈõÜÊâÄÊúâÊñá‰ª∂
        all_files = []
        for pattern in ['**/*.md', '**/*.markdown']:
            for file_path in base_dir.glob(pattern):
                rel_path = file_path.relative_to(base_dir)
                all_files.append(str(rel_path))
        
        # Â∞ÜÊñá‰ª∂ÂàÜÁ±ª
        categorized_files = set()
        
        for category_name, category_info in categories.items():
            for pattern in category_info["patterns"]:
                for file_path in base_dir.glob(pattern):
                    if file_path.is_file():
                        rel_path = str(file_path.relative_to(base_dir))
                        if rel_path in all_files:
                            category_info["files"].append(rel_path)
                            categorized_files.add(rel_path)
        
        # Êú™ÂàÜÁ±ªÁöÑÊñá‰ª∂
        uncategorized = [f for f in all_files if f not in categorized_files]
        if uncategorized:
            categories["‚ùì ÂÖ∂‰ªñÊñá‰ª∂"] = {
                "files": sorted(uncategorized),
                "icon": "‚ùì"
            }
        
        # Ê∏ÖÁêÜÁ©∫ÂàÜÁ±ªÂπ∂ÊéíÂ∫èÊñá‰ª∂
        result = {}
        for category_name, category_info in categories.items():
            if category_info["files"]:
                result[category_name] = {
                    "icon": category_info["icon"],
                    "files": sorted(category_info["files"])
                }
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.end_headers()
        self.wfile.write(json.dumps(result, ensure_ascii=False).encode('utf-8'))
    
    def read_file(self):
        """ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ"""
        file_path = urllib.parse.unquote(self.path[10:])  # Remove '/api/read/'
        full_path = Path('/root/cuhkstudy') / file_path
        
        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.send_response(200)
            self.send_header('Content-type', 'text/plain; charset=utf-8')
            self.end_headers()
            self.wfile.write(content.encode('utf-8'))
        except Exception as e:
            self.send_error(500, str(e))
    
    def save_file(self):
        """‰øùÂ≠òÊñá‰ª∂"""
        file_path = urllib.parse.unquote(self.path[10:])  # Remove '/api/save/'
        full_path = Path('/root/cuhkstudy') / file_path
        
        try:
            content_length = int(self.headers['Content-Length'])
            content = self.rfile.read(content_length).decode('utf-8')
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            full_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.send_response(200)
            self.send_header('Content-type', 'text/plain; charset=utf-8')
            self.end_headers()
            self.wfile.write('‰øùÂ≠òÊàêÂäü'.encode('utf-8'))
        except Exception as e:
            self.send_error(500, str(e))

def start_editor(port=8080):
    """ÂêØÂä®ÁºñËæëÂô®ÊúçÂä°"""
    os.chdir('/root/cuhkstudy')
    
    with socketserver.TCPServer(("", port), MarkdownEditorHandler) as httpd:
        print(f"üöÄ Markdown Editor started at http://localhost:{port}")
        print(f"üìù You can now edit markdown files in your browser!")
        print(f"üîó Open: http://your-server-ip:{port}")
        print(f"‚≠ê Press Ctrl+C to stop")
        httpd.serve_forever()

if __name__ == "__main__":
    import sys
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 8888
    start_editor(port)